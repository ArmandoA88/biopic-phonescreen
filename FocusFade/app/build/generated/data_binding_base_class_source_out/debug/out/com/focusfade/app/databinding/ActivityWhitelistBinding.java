// Generated by view binder compiler. Do not edit!
package com.focusfade.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.focusfade.app.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWhitelistBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton buttonGrantPermission;

  @NonNull
  public final MaterialCardView cardPermissionRequired;

  @NonNull
  public final TextView headerAllApps;

  @NonNull
  public final TextView headerSuggestedApps;

  @NonNull
  public final TextView headerWhitelistedApps;

  @NonNull
  public final RecyclerView recyclerAllApps;

  @NonNull
  public final RecyclerView recyclerSuggestedApps;

  @NonNull
  public final RecyclerView recyclerWhitelistedApps;

  @NonNull
  public final LinearLayout sectionAllApps;

  @NonNull
  public final LinearLayout sectionSuggestedApps;

  @NonNull
  public final LinearLayout sectionWhitelistedApps;

  @NonNull
  public final TextView textNoWhitelistedApps;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityWhitelistBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton buttonGrantPermission,
      @NonNull MaterialCardView cardPermissionRequired, @NonNull TextView headerAllApps,
      @NonNull TextView headerSuggestedApps, @NonNull TextView headerWhitelistedApps,
      @NonNull RecyclerView recyclerAllApps, @NonNull RecyclerView recyclerSuggestedApps,
      @NonNull RecyclerView recyclerWhitelistedApps, @NonNull LinearLayout sectionAllApps,
      @NonNull LinearLayout sectionSuggestedApps, @NonNull LinearLayout sectionWhitelistedApps,
      @NonNull TextView textNoWhitelistedApps, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.buttonGrantPermission = buttonGrantPermission;
    this.cardPermissionRequired = cardPermissionRequired;
    this.headerAllApps = headerAllApps;
    this.headerSuggestedApps = headerSuggestedApps;
    this.headerWhitelistedApps = headerWhitelistedApps;
    this.recyclerAllApps = recyclerAllApps;
    this.recyclerSuggestedApps = recyclerSuggestedApps;
    this.recyclerWhitelistedApps = recyclerWhitelistedApps;
    this.sectionAllApps = sectionAllApps;
    this.sectionSuggestedApps = sectionSuggestedApps;
    this.sectionWhitelistedApps = sectionWhitelistedApps;
    this.textNoWhitelistedApps = textNoWhitelistedApps;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWhitelistBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWhitelistBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_whitelist, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWhitelistBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonGrantPermission;
      MaterialButton buttonGrantPermission = ViewBindings.findChildViewById(rootView, id);
      if (buttonGrantPermission == null) {
        break missingId;
      }

      id = R.id.cardPermissionRequired;
      MaterialCardView cardPermissionRequired = ViewBindings.findChildViewById(rootView, id);
      if (cardPermissionRequired == null) {
        break missingId;
      }

      id = R.id.headerAllApps;
      TextView headerAllApps = ViewBindings.findChildViewById(rootView, id);
      if (headerAllApps == null) {
        break missingId;
      }

      id = R.id.headerSuggestedApps;
      TextView headerSuggestedApps = ViewBindings.findChildViewById(rootView, id);
      if (headerSuggestedApps == null) {
        break missingId;
      }

      id = R.id.headerWhitelistedApps;
      TextView headerWhitelistedApps = ViewBindings.findChildViewById(rootView, id);
      if (headerWhitelistedApps == null) {
        break missingId;
      }

      id = R.id.recyclerAllApps;
      RecyclerView recyclerAllApps = ViewBindings.findChildViewById(rootView, id);
      if (recyclerAllApps == null) {
        break missingId;
      }

      id = R.id.recyclerSuggestedApps;
      RecyclerView recyclerSuggestedApps = ViewBindings.findChildViewById(rootView, id);
      if (recyclerSuggestedApps == null) {
        break missingId;
      }

      id = R.id.recyclerWhitelistedApps;
      RecyclerView recyclerWhitelistedApps = ViewBindings.findChildViewById(rootView, id);
      if (recyclerWhitelistedApps == null) {
        break missingId;
      }

      id = R.id.sectionAllApps;
      LinearLayout sectionAllApps = ViewBindings.findChildViewById(rootView, id);
      if (sectionAllApps == null) {
        break missingId;
      }

      id = R.id.sectionSuggestedApps;
      LinearLayout sectionSuggestedApps = ViewBindings.findChildViewById(rootView, id);
      if (sectionSuggestedApps == null) {
        break missingId;
      }

      id = R.id.sectionWhitelistedApps;
      LinearLayout sectionWhitelistedApps = ViewBindings.findChildViewById(rootView, id);
      if (sectionWhitelistedApps == null) {
        break missingId;
      }

      id = R.id.textNoWhitelistedApps;
      TextView textNoWhitelistedApps = ViewBindings.findChildViewById(rootView, id);
      if (textNoWhitelistedApps == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityWhitelistBinding((LinearLayout) rootView, buttonGrantPermission,
          cardPermissionRequired, headerAllApps, headerSuggestedApps, headerWhitelistedApps,
          recyclerAllApps, recyclerSuggestedApps, recyclerWhitelistedApps, sectionAllApps,
          sectionSuggestedApps, sectionWhitelistedApps, textNoWhitelistedApps, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
