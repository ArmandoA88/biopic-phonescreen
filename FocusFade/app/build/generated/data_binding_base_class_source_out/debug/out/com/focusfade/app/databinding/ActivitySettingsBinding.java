// Generated by view binder compiler. Do not edit!
package com.focusfade.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.focusfade.app.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton buttonDailyResetTime;

  @NonNull
  public final MaterialButton buttonResetSettings;

  @NonNull
  public final MaterialButton buttonSelectBlur;

  @NonNull
  public final MaterialButton buttonSelectColorShift;

  @NonNull
  public final MaterialButton buttonSelectPattern;

  @NonNull
  public final Slider sliderMinBlurLevel;

  @NonNull
  public final TextView textDailyResetTime;

  @NonNull
  public final TextView textMinBlurLevel;

  @NonNull
  public final TextView textNextReset;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivitySettingsBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton buttonDailyResetTime, @NonNull MaterialButton buttonResetSettings,
      @NonNull MaterialButton buttonSelectBlur, @NonNull MaterialButton buttonSelectColorShift,
      @NonNull MaterialButton buttonSelectPattern, @NonNull Slider sliderMinBlurLevel,
      @NonNull TextView textDailyResetTime, @NonNull TextView textMinBlurLevel,
      @NonNull TextView textNextReset, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.buttonDailyResetTime = buttonDailyResetTime;
    this.buttonResetSettings = buttonResetSettings;
    this.buttonSelectBlur = buttonSelectBlur;
    this.buttonSelectColorShift = buttonSelectColorShift;
    this.buttonSelectPattern = buttonSelectPattern;
    this.sliderMinBlurLevel = sliderMinBlurLevel;
    this.textDailyResetTime = textDailyResetTime;
    this.textMinBlurLevel = textMinBlurLevel;
    this.textNextReset = textNextReset;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDailyResetTime;
      MaterialButton buttonDailyResetTime = ViewBindings.findChildViewById(rootView, id);
      if (buttonDailyResetTime == null) {
        break missingId;
      }

      id = R.id.buttonResetSettings;
      MaterialButton buttonResetSettings = ViewBindings.findChildViewById(rootView, id);
      if (buttonResetSettings == null) {
        break missingId;
      }

      id = R.id.buttonSelectBlur;
      MaterialButton buttonSelectBlur = ViewBindings.findChildViewById(rootView, id);
      if (buttonSelectBlur == null) {
        break missingId;
      }

      id = R.id.buttonSelectColorShift;
      MaterialButton buttonSelectColorShift = ViewBindings.findChildViewById(rootView, id);
      if (buttonSelectColorShift == null) {
        break missingId;
      }

      id = R.id.buttonSelectPattern;
      MaterialButton buttonSelectPattern = ViewBindings.findChildViewById(rootView, id);
      if (buttonSelectPattern == null) {
        break missingId;
      }

      id = R.id.sliderMinBlurLevel;
      Slider sliderMinBlurLevel = ViewBindings.findChildViewById(rootView, id);
      if (sliderMinBlurLevel == null) {
        break missingId;
      }

      id = R.id.textDailyResetTime;
      TextView textDailyResetTime = ViewBindings.findChildViewById(rootView, id);
      if (textDailyResetTime == null) {
        break missingId;
      }

      id = R.id.textMinBlurLevel;
      TextView textMinBlurLevel = ViewBindings.findChildViewById(rootView, id);
      if (textMinBlurLevel == null) {
        break missingId;
      }

      id = R.id.textNextReset;
      TextView textNextReset = ViewBindings.findChildViewById(rootView, id);
      if (textNextReset == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((LinearLayout) rootView, buttonDailyResetTime,
          buttonResetSettings, buttonSelectBlur, buttonSelectColorShift, buttonSelectPattern,
          sliderMinBlurLevel, textDailyResetTime, textMinBlurLevel, textNextReset, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
